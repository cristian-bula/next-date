generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model dates {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime?
  description String
  photos      String[]
  dressCode   String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  reviews     reviews[] @relation("DateReviews")
}

model dates_backups {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  dateId      String    @db.ObjectId
  date        DateTime?
  description String
  photos      String[]
  dressCode   String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model users {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String           @unique
  password  String
  photo     String?
  role      String
  reviews   reviews[]        @relation("UserReviews")
  tokens    tokenWhiteList[] @relation("UserTokens")
  todos     todo[]           @relation("UserTodos")
  movies    movieReviews[]   @relation("UserMovieReviews")
  conversations conversation[] @relation("UserConversations")
  // subscriptions subscription[] @relation("UserSubscriptions")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  userId    String   @db.ObjectId
  dateId    String   @db.ObjectId
  user      users    @relation("UserReviews", fields: [userId], references: [id])
  date      dates    @relation("DateReviews", fields: [dateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model tokenWhiteList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @db.ObjectId
  user      users    @relation("UserTokens", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model subscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  subscription String
  // userId      String   @db.ObjectId
  // user        users    @relation("UserSubscriptions", fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  completed Boolean  @default(false)
  userId    String   @db.ObjectId
  user      users    @relation("UserTodos", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model movies {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  watchedBy   movieReviews[] @relation("MovieReviews")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model movieReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  userId    String   @db.ObjectId
  movieId   String   @db.ObjectId
  user      users    @relation("UserMovieReviews", fields: [userId], references: [id])
  movie     movies   @relation("MovieReviews", fields: [movieId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model conversation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  personName String
  date       DateTime
  userId     String   @db.ObjectId
  user       users    @relation("UserConversations", fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
